set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-ragtag'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-haml'
Plugin 'chr4/nginx.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'davidhalter/jedi-vim'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'
Plugin 'hashivim/vim-terraform'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'morhetz/gruvbox'
Plugin 'dart-lang/dart-vim-plugin'

" Snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tomtom/tcomment_vim'
Plugin 'ervandew/supertab'
" For Silver Searcher and other goodies
Plugin 'mileszs/ack.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'jiangmiao/auto-pairs'
Plugin 'airblade/vim-gitgutter'
Plugin 'ZucchiniZe/vim-spider'
Plugin 'fatih/vim-go'
Plugin 'mattn/emmet-vim'
Plugin 'valloric/MatchTagAlways'
Plugin 'digitaltoad/vim-jade'
Plugin 'vim-scripts/SyntaxComplete.git'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'thinca/vim-localrc'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
"Plugin 'scrooloose/syntastic'
Plugin 'joshdick/onedark.vim'
Plugin 'crusoexia/vim-monokai'
Plugin 'altercation/vim-colors-solarized'
" Async Linting
Plugin 'w0rp/ale'
Plugin 'chiedojohn/vim-case-convert'
" NVim Colorizer
Plugin 'norcalli/nvim-colorizer.lua'

" Color Themes
Plugin 'flazz/vim-colorschemes'
Plugin 'AlessandroYorba/Despacio'
Plugin 'w0ng/vim-hybrid'
Plugin 'gosukiwi/vim-atom-dark'
Plugin 'vim-scripts/Eddie.vim'
Plugin 'cocopon/pgmnt.vim'
Plugin 'raphamorim/lucario'
Plugin 'arcticicestudio/nord-vim'
Plugin 'marcopaganini/termschool-vim-theme'
Plugin 'danilo-augusto/vim-afterglow'
Plugin 'nightsense/carbonized'
Plugin 'rakr/vim-one'
Plugin 'franbach/miramare'
Plugin 'sainnhe/sonokai'

" https://github.com/tmux/tmux/issues/1246
" Enable true color 启用终端24位色
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Initialize colorizer
lua require'colorizer'.setup()

" miramare theme
" let g:miramare_enable_italic = 1
" let g:miramare_disable_italic_comment = 1

" colorscheme miramare

" let g:sonokai_style = 'andromeda'
" let g:sonokai_enable_italic = 1
" let g:sonokai_disable_italic_comment = 1
"
" colorscheme sonokai

" pangloss/vim-javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
let g:javascript_plugin_ngdoc = 1
""""""""
filetype plugin indent on

" Make Python Look pretty
let python_highlight_all=1

syntax on

" colorscheme onedark
colorscheme gruvbox

" Open NERDTree by default
" autocmd vimenter * NERDTree
" Toggle NERDTree
map <C-b> :NERDTreeToggle<CR>
" Close NERDTree when thats the last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" FZF (Fuzzy Finder)
"nnoremap <C-p> :FZF<Cr>
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-g> :GFiles<CR>
nnoremap <silent> <C-o> :Buffers<CR>
nnoremap <C-f> :Rg! 

" Use :help 'option' to see the documentation for the given option.
set t_Co=256
set autoindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set showmode
set smarttab
set colorcolumn=80
set nrformats-=octal
set shiftround
set ttimeout
set ttimeoutlen=50
set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif
set laststatus=2
set ruler
set showcmd
set wildmenu
set autoread
set encoding=utf-8
set tabstop=2 shiftwidth=2 expandtab
set listchars=tab:▒░,trail:▓
set list
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4
inoremap <C-U> <C-G>u<C-U>
set number
set relativenumber
set hlsearch
set ignorecase
set smartcase
" Don't use Ex mode, use Q for formatting
map Q gq
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif
" do not history when leavy buffer
set hidden
" FIXME: (broken) ctrl s to save
noremap  <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <Esc>:update<CR>
set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac
" exit insert mode 
inoremap <C-c> <Esc>
set completeopt=menuone,longest,preview
"
" Plugins config
"
" Allow JSX in normal JS files
let g:jsx_ext_required = 0
" Ultisnip
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ['~/.vim/bundle/vim-snippets/UltiSnips', 'UltiSnips']

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Bufferline
let g:airline#extensions#bufferline#enabled = 1
let g:bufferline_echo = 0 " This will keep your messages from getting quickly hidden.

"
" Basic shortcuts definitions
"  most in visual mode / selection (v or ⇧ v)
"
" indend / deindent after selecting the text with (⇧ v), (.) to repeat.
" vnoremap <Tab> >
" vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Disable tComment to escape some entities
let g:tcomment#replacements_xml={}
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Tabs
" nnoremap <C-b>  :tabprevious<CR>
" inoremap <C-b>  <Esc>:tabprevious<CR>i
" nnoremap <C-n>  :tabnext<CR>
" inoremap <C-n>  <Esc>:tabnext<CR>i
" nnoremap <C-t>  :tabnew<CR>
" inoremap <C-t>  <Esc>:tabnew<CR>i
" nnoremap <C-k>  :tabclose<CR>
" inoremap <C-k>  <Esc>:tabclose<CR>i
" lazy ':'
map \ :
let mapleader = ','
nnoremap <Leader>p :set paste<CR>
nnoremap <Leader>o :set nopaste<CR>
noremap  <Leader>g :GitGutterToggle<CR>
" this machine config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" silver searcher yo
if executable('ag')
  let g:ackprg = 'ag --vimgrep --smart-case'
  let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat .ctrlpignore`"'

  cnoreabbrev ag Ack
  cnoreabbrev aG Ack
  cnoreabbrev Ag Ack
  cnoreabbrev AG Ack

endif
" Do not jump to first result immediately! (ack/silver searcher)
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
nnoremap <Leader>b :ls<CR>:b<Space>

" neovim + pyenv (virtualenv)
" pyenv virtualenv 3.8.5 py3nvim
" pyenv activate py3nvim
" pip install neovim
" pyenv which python
let g:python3_host_prog = '$HOME/.pyenv/versions/py3nvim/bin/python'
