" Required for plugin management
call plug#begin('~/.local/share/nvim/plugged')

" Node.js development
Plug 'pangloss/vim-javascript'
Plug 'prettier/vim-prettier'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'w0rp/ale'
" Use release branch (recommended)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Go development
Plug 'fatih/vim-go'

" Python development
Plug 'davidhalter/jedi-vim'
Plug 'vim-python/python-syntax'
Plug 'python-mode/python-mode'

" Auto-completion
Plug 'ervandew/supertab'

" Silver searcher integration
Plug 'mileszs/ack.vim'

" File navigation
Plug 'scrooloose/nerdtree'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Debugger
Plug 'mfussenegger/nvim-dap'
" Install DAP (i.e. nodejs) as follows:
" https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#Javascript

" Fuzzy finder with fzf
Plug 'junegunn/fzf.vim', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf'

" Indentation
Plug 'Yggdroot/indentLine'

" Color schemes
Plug 'flazz/vim-colorschemes'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }

" Color utilities
Plug 'norcalli/nvim-colorizer.lua'

" Airline plugin
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

syntax on

" colorscheme gruvbox
colorscheme catppuccin-mocha

set nocompatible

" Documentation for below options can be seen with :help <option>
" Use 2 spaces instead of tabs
set expandtab
set tabstop=2
set shiftwidth=2

" Show ruler
set ruler

" Copy indent from current line when starting a new line
set autoindent

" When a bracket is inserted, briefly jump to the matching one
set showmatch

" If in INSERT, REPLACE or VISUL mode, put a message on the last line.
set showmode

" When on, a <TAB> in fron of a line inserts blanks according to 'shiftwidth'
set smarttab

" comma-separated list of screen columns that are highlighted with ColorColumn
" hl-ColorColumn
set colorcolumn=80

" Defines what bases VIM will consider for numbers when using the CTRL-A and
" CTRL-X commands for adding to and substracting from a number respectively
" Currently excluding octal
set nrformats-=octal

" Round indent to multiple of 'shiftwidth'
set shiftround

" While typing a search command, show where the pattern, as it was typed so
" far, matches.
set incsearch

" When there is a previous search pattern, highlight all its matches.
set hlsearch

" Ignore case in search patterns.
set ignorecase

" Override the ignorecase option if the search pattern contains upper case
" characters
set smartcase

" Set encoding
set encoding=utf-8

" Show line numbers on the right
set number
set relativenumber

set nobackup
set nowritebackup
set noswapfile

" https://github.com/tmux/tmux/issues/1246
" Enable true color 启用终端24位色
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" Bufferline
let g:airline#extensions#bufferline#enabled = 1
let g:bufferline_echo = 0 " This will keep your messages from getting quickly hidden.
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Nerdtree config
map <C-n> :NERDTreeToggle<CR>

" lazy ':'
map \ :

" lazy <Leader>
let mapleader = ','

" Fuzzy finder config
let g:fzf_exclude = ['\.git', 'node_modules']
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-g> :GFiles<CR>
nnoremap <silent> <C-o> :Buffers<CR>

" silver searcher config
if executable('ag')
  " let g:ackprg = 'ag --nogroup --nocolor --column'
  let g:ackprg = 'ag --vimgrep --smart-case'
  let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat .ctrlpignore`"'
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'

  cnoreabbrev ag Ack
  cnoreabbrev aG Ack
  cnoreabbrev Ag Ack
  cnoreabbrev AG Ack
endif

" Do not jump to first result immediately! (ack/silver searcher)
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
nnoremap <Leader>b :ls<CR>:b<Space>

" neovim + pyenv (virtualenv)
" pyenv virtualenv 3.8.1 py3nvim
" pyenv activate py3nvim
" pip install pyenv
" pyenv which python
let g:python3_host_prog = '$HOME/.pyenv/versions/py3nvim/bin/python'

" Norcalli's setup
lua require'colorizer'.setup()

" Node DAP Adapter
lua require('node_adapter')
" Custom mappings in ~/.config/nvim/lua/dap_mappings.lua
lua require('dap_mappings')
